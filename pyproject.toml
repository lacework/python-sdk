[tool.poetry]
name = "laceworksdk"
version = "4.1.0"
description = "Community-developed Python SDK for the Lacework APIs"
authors = ["Lacework"]
maintainers = ["Tim MacDonald <tim.macdonald@lacework.net>"]
readme = "README.md"
packages = [{include = "laceworksdk"}]
license = "MIT"
homepage = "https://github.com/lacework/python-sdk"
repository = "https://github.com/lacework/python-sdk"
keywords = ["lacework", "api", "sdk", "python"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Build Tools",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
python = ">=3.8,<4"
python-dotenv = ">=0.20.0"
requests = ">=2.27.1"
configparser = ">=5.2.0"
bleach = ">=4.1.0"
urllib3 = ">=1.26.15"
importlib-metadata = ">=4.2"


[tool.poetry.group.dev.dependencies]
autopep8 = "^1.7"
flake8 = "^5.0.4"
flake8-quotes = "^3.3"
ruff = "^0.1.9"
pytest = "^7.2.2"
pytest-order = "^1.2.0"
pytest-lazy-fixture = "^0.6.3"
pytest-rerunfailures = "^11.1.2"
mypy = "^1.1.1"
types-requests = "^2.28"
types-urllib3 = "^1.26"
pre-commit = "^2.21.0"
commitizen = "^2.42.1"
sphinx = {version = "^7.2.6", python = ">=3.9,<4"}
sphinx-autoapi = {version = "^3.0.0",  python = ">=3.9,<4"}
sphinx-rtd-theme = {version = "^2.0.0", python = ">=3.9,<4"}
poethepoet = "^0.24.1"
python-semantic-release = "^8.7.0"



[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]

[tool.ruff.lint]
select = ["D"]
ignore = ["D200", "D212", "D105", "D202", "D301", "D415"  ]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.pytest.ini_options]
markers = [
    "ci_exempt: mark a test as exempt from CI.",
    "quarantine_test: quarantine a test until it's fixed.",
  ]
addopts = [
    "--ignore=tests/api/v2/test_policies.py",
    "--ignore=tests/api/v2/test_queries.py",
  ]

[tool.poe.tasks]
test        = "pytest -v --order-scope=class -m 'not ci_exempt and not quarantine_test' tests/api/v2"
quarantine_test  = "pytest -m 'quarantine_test' tests"
lint        = "flake8 . --exclude 'jupyter' --count --select=E9,F63,F7,F82 --show-source --statistics"
lint-docstrings = "ruff check laceworksdk/"
docs-clean.shell  = "rm -r docs-source/auto; rm -r docs/doctrees; rm -r docs/html"
docs-build.shell  = "sphinx-build -M html docs-source docs"
docs.sequence = ["docs-clean", "docs-build"]
docs.ignore_fail = "return_zero"


[tool.semantic_release]
assets = []

commit_message = "chore(release): v{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
build_command = "poetry build"
logging_use_named_masks = false
major_on_zero = true
tag_format = "v{version}"
version_toml = ["pyproject.toml:tool.poetry.version"]
version_source = "tag"


[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.branches.release]
match = "release"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "Lacework Inc. <tech-ally@lacework.net>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[tool.semantic_release.remote.token]
env = "GH_TOKEN"

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
