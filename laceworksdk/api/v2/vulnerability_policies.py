# -*- coding: utf-8 -*-
"""Lacework VulnerabilityPolicies API wrapper."""

from laceworksdk.api.crud_endpoint import CrudEndpoint


class VulnerabilityPoliciesAPI(CrudEndpoint):

    def __init__(self, session):
        """Initializes the VulnerabilityPoliciesAPI object.

        Args:
          session: An instance of the HttpSession class

        :return VulnerabilityPoliciesAPI object.

        Returns:

        """
        super().__init__(session, "VulnerabilityPolicies")

    def create(self,
               policy_type,
               policy_name,
               severity,
               state,
               filter,
               props,
               policy_eval_type=None,
               fail_on_violation=False,
               alert_on_violation=False,
               **request_params):
        """A method to create a new VulnerabilityPolicies object.

        Args:
          policy_type: A string representing the type of the policy.
          policy_name: A string representing the name of the policy.
          severity: A string representing the severity of the policy.
        ("Info", "Low", "Medium", "High", "Critical")
          state: A boolean representing the state of the policy.
          filter: obj:
          rule: An object representing a policy filter rule.
        obj:
          operator: A string representing the rule operator.
        ("include", "exclude", "equals", "notEquals")
          values: An array of strings representing the rule values.
          exception: An object representing a policy filter exception.
        obj:
          operator: A string representing the rule operator.
        ("include", "exclude", "equals", "notEquals")
          values: An array of strings representing the exception values.
          props: An object containing properties of the policy.
        obj:
          description: A string representing the property description.
          createdBy: A string representing the creator of the property.
          updatedBy: A string representing the updater of the property.
          policy_eval_type: A string representing the policy evaluation type. (Default value = None)
          fail_on_violation: A boolean representing whether the policy should fail on violations. (Default value = False)
          alert_on_violation: A boolean representing whether the policy should alert on violations. (Default value = False)
          request_params: Additional request parameters.
        (provides support for parameters that may be added in the future)
        
        :return response json
          **request_params: 

        Returns:

        """
        return super().create(
            policy_type=policy_type,
            policy_name=policy_name,
            severity=severity,
            state=int(bool(state)),
            filter=filter,
            props=props,
            policy_eval_type=policy_eval_type,
            fail_on_violation=int(bool(fail_on_violation)),
            alert_on_violation=int(bool(alert_on_violation)),
            **request_params
        )

    def get(self,
            guid=None):
        """A method to get VulnerabilityPolicies objects.

        Args:
          guid: A string representing the object GUID.
        
        :return response json (Default value = None)

        Returns:

        """
        return super().get(id=guid)

    def get_by_guid(self,
                    guid):
        """A method to get a VulnerabilityPolicies object by GUID.

        Args:
          guid: A string representing the object GUID.
        
        :return response json

        Returns:

        """
        return self.get(guid=guid)

    def update(self,
               guid,
               policy_type=None,
               policy_name=None,
               severity=None,
               state=None,
               filter=None,
               props=None,
               policy_eval_type=None,
               fail_on_violation=None,
               alert_on_violation=None,
               **request_params):
        """A method to update a VulnerabilityPolicies object.

        Args:
          guid: A string representing the object GUID.
          policy_type: A string representing the type of the policy. (Default value = None)
          policy_name: A string representing the name of the policy. (Default value = None)
          severity: A string representing the severity of the policy.
        ("Info", "Low", "Medium", "High", "Critical") (Default value = None)
          state: A boolean representing the state of the policy. (Default value = None)
          filter: obj: (Default value = None)
          rule: An object representing a policy filter rule.
        obj:
          operator: A string representing the rule operator.
        ("include", "exclude", "equals", "notEquals")
          values: An array of strings representing the rule values.
          exception: An object representing a policy filter exception.
        obj:
          operator: A string representing the rule operator.
        ("include", "exclude", "equals", "notEquals")
          values: An array of strings representing the exception values.
          props: An object containing properties of the policy.
        obj: (Default value = None)
          description: A string representing the property description.
          createdBy: A string representing the creator of the property.
          updatedBy: A string representing the updater of the property.
          policy_eval_type: A string representing the policy evaluation type. (Default value = None)
          fail_on_violation: A boolean representing whether the policy should fail on violations. (Default value = None)
          alert_on_violation: A boolean representing whether the policy should alert on violations. (Default value = None)
          request_params: Additional request parameters.
        (provides support for parameters that may be added in the future)
        
        :return response json
          **request_params: 

        Returns:

        """
        if state is not None:
            state = int(bool(state))
        if fail_on_violation is not None:
            fail_on_violation = int(bool(fail_on_violation))
        if alert_on_violation is not None:
            alert_on_violation = int(bool(alert_on_violation))

        return super().update(
            guid,
            policy_type=policy_type,
            policy_name=policy_name,
            severity=severity,
            state=state,
            filter=filter,
            props=props,
            policy_eval_type=policy_eval_type,
            fail_on_violation=fail_on_violation,
            alert_on_violation=alert_on_violation,
            **request_params
        )

    def delete(self,
               guid):
        """A method to delete a VulnerabilityPolicies object.

        Args:
          guid: A string representing the object GUID.
        
        :return response json

        Returns:

        """
        return super().delete(id=guid)
